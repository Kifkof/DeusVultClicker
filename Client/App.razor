@using System.Threading
@using DeusVultClicker.Client.Shared.Store
@using DeusVultClicker.Client.Shared.Store.Actions
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
<Fluxor.Blazor.Web.StoreInitializer />

<header><h1>Deus Vult Clicker</h1></header>
<main>
    <Grid />
</main>
<footer>Footer</footer>
<style>
    header {
        display: flex;
    }

        header h1 {
            flex: 1;
        }

    main {
        flex: 1;
    }
</style>

@code
{
    private int intervalInMs = 5000;

    [Inject]
    private IState<AppState> AppState { get; set; }
    [Inject]
    private IDispatcher Dispatcher { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.Dispatcher.Dispatch(new LoadSaveStateAction());
        var timer = new System.Timers.Timer(intervalInMs);
        timer.Elapsed += TimerOnElapsed;
        timer.Start();
    }

    private void TimerOnElapsed(object _, EventArgs __)
    {
        if (AppState.Value.Followers != 0)
        {
            Dispatcher.Dispatch(new AddFaithAction(ToTickValue(AppState.Value.FaithPerSecondModifier * AppState.Value.Followers)));
            Dispatcher.Dispatch(new AddMoneyAction(ToTickValue(AppState.Value.MoneyPerSecondModifier * AppState.Value.Followers)));
        }
        //SetFollowersOnNextTick();
        this.StateHasChanged();
    }

    private double ToTickValue(double valuePerSecond)
    {
        return valuePerSecond / (1000d / intervalInMs);
    }
}
