@using System.Timers
@using DeusVultClicker.Client.Advancements
@using DeusVultClicker.Client.Advancements.Effects
<header>Header</header>
<main>
    <div id="current-faith">Faith:  @currentFaith.ToString("n2") </div>
    <div id="current-followers">Followers:  @currentFollowers</div>
    <div id="current-money">Cash:  @currentMoney.ToString("c")</div>
    <div id="secondary-click-container">
        <button class="btn btn-primary" @onclick="IncrementFaith">Pray</button>
    </div>
    <div id="primary-click-container">
        <button class="btn btn-primary" @onclick="IncrementFollowers">Proselytize</button>
    </div>
    <div id="era-container">
        @if (AvailableEraAdvancement != null)
        {
            <span class="era-title">@AvailableEraAdvancement.Title</span>
            <span class="era-description">@AvailableEraAdvancement.Description</span>
            <span class="era-effect-description">@AvailableEraAdvancement.EffectDescription</span>
            <span class="era-flavor-text">@AvailableEraAdvancement.FlavorText</span>
            <span class="era-faith-cost">@AvailableEraAdvancement.Cost Faith</span>
            <button class="btn btn-primary" type="button" disabled="@(AvailableEraAdvancement.Cost > currentFaith)" @onclick="() => AdvanceToEra(AvailableEraAdvancement)">Buy</button>
        }
    </div>
    <div id="building-container">
        <ul>
            @foreach (var building in AvailableBuildings)
            {
                <li>
                    <span class="building-title">@building.Title</span>
                    <span class="building-description">@building.Description</span>
                    <span class="building-effect-description">@building.EffectDescription @building.Reach</span>
                    <span class="building-flavor-text">@building.FlavorText</span>
                    <span class="building-faith-cost">@building.Cost Cash</span>
                    <button class="btn btn-primary" type="button" disabled="@(building.Cost > currentMoney || building.SpaceRequirement > AvailableSpace)" @onclick="() => BuyBuilding(building)">Buy</button>
                </li>
            }
        </ul>
    </div>
    <div id="upgrades-container">
        <ul>
            @foreach (var upgrade in AvailableUpgrades)
            {
                <li>
                    <span class="upgrade-title">@upgrade.Title</span>
                    <span class="upgrade-description">@upgrade.Description</span>
                    <span class="upgrade-effect-description">@upgrade.EffectDescription</span>
                    <span class="upgrade-flavor-text">@upgrade.FlavorText</span>
                    <span class="upgrade-faith-cost">@upgrade.Cost Faith</span>
                    <button class="btn btn-primary" type="button" disabled="@(upgrade.Cost > currentFaith)" @onclick="() => BuyUpgrade(upgrade)">Buy</button>
                </li>
            }
        </ul>
    </div>
</main>
<footer>Footer</footer>
<style>
    main {
        flex: 1;
        display: grid;
        grid-template: "cft cfl cm uc" 5% "scc pcc bc uc" auto "ec ec bc uc" auto / 12.5% 12.5% auto auto
    }

    #current-faith {
        grid-area: cft;
    }

    #current-followers {
        grid-area: cfl;
    }

    #current-money {
        grid-area: cm;
    }

    #secondary-click-container {
        grid-area: scc;
    }

    #primary-click-container {
        grid-area: pcc;
    }

    #era-container {
        grid-area: ec;
    }

    #building-container {
        grid-area: bc;
    }

    #upgrades-container {
        grid-area: uc;
    }

        #upgrades-container ul, #building-container ul {
            list-style-type: none;
        }

            #upgrades-container ul li, #building-container ul li, #era-container {
                display: flex;
                flex-direction: column;
            }
</style>

@code
{
    private int Reach => OwnedBuildings.Sum(b => b.Reach);
    private double currentFaith;
    private int currentFollowers;
    private double currentMoney;
    private double moneyPerSecondModifier;
    private int intervalInMs = 50;
    private EraAdvancement CurrentEra => ownedAdvancements.OfType<EraAdvancement>().SingleOrDefault();
    private int existingSpace = 1;
    private int AvailableSpace => existingSpace - OwnedBuildings.Sum(b => b.SpaceRequirement);

    private List<Advancement> ownedAdvancements = new();

    private List<Upgrade> AvailableUpgrades => Upgrades
    .Where(u => !PurchasedUpgrades.Contains(u.Value) && u.Value.Prerequisites.All(p => ownedAdvancements.Any(a => a.Id == p)))
    .Select(u => u.Value)
    .ToList();

    private List<Upgrade> PurchasedUpgrades => ownedAdvancements.OfType<Upgrade>().ToList();

    private static readonly Dictionary<string, Upgrade> Upgrades = new()
    {
            {
                "beg",
                new Upgrade
                {
                    Id = "beg",
                    Title = "Beg",
                    Description = "Send your followers to beg for money.",
                    EffectDescription = "Follower cps + 0.1",
                    FlavorText = "Beg for merc.....money",
                    Cost = 250,
                    Prerequisites = new[] { "post-religion-era" },
                    Effects = new[] { new MoneyUpgradeEffect(0.1) }
                }
            }
        };

    private EraAdvancement AvailableEraAdvancement => EraAdvancements.Values
        .FirstOrDefault(u => !pastEras.Contains(u.Id) && u.Prerequisites.All(p => ownedAdvancements.Any(a => a.Id == p)));

    private List<string> pastEras = new();

    private static readonly Dictionary<string, EraAdvancement> EraAdvancements = new()
    {
            {
                "jesus-era",
                new EraAdvancement
                {
                    Id = "jesus-era",
                    Title = "Invent Jesus",
                    Description = "Please GOD send me a savior.",
                    EffectDescription = "Sends the Messiah to earth.",
                    FlavorText = "Jesus Christ it's Jesus Christ.",
                    Cost = 50,
                    EraName = "jesus-era"
                }
            },
            {
                "post-religion-era",
                new EraAdvancement
                {
                    Id = "post-religion-era",
                    Title = "You could make a religion out of this!",
                    Description = "Create a religion.",
                    EffectDescription = "Now what?",
                    FlavorText = "No don't.",
                    Cost = 500,
                    Prerequisites = new[] { "jesus-era", "boulder" },
                    EraName = "post-religion-era"
                }
            },
        };

    private List<Building> AvailableBuildings => Buildings
        .Where(u => u.Value.Prerequisites.All(p => ownedAdvancements.Any(a => a.Id == p)))
        .Select(u => u.Value)
        .ToList();

    private List<Building> OwnedBuildings => ownedAdvancements.OfType<Building>().ToList();

    private static readonly Dictionary<string, Building> Buildings = new()
    {
            {
                "boulder",
                new Building
                {
                    Id = "boulder",
                    Title = "Boulder",
                    Description = "A large stone to yell down from.",
                    FlavorText = "Everything has to start somewhere.",
                    Cost = 0,
                    Reach = 12,
                    SpaceRequirement = 1,
                    Prerequisites = new[] { "jesus-era" },
                }
            },
            {
                "podium",
                new Building
                {
                    Id = "podium",
                    Title = "Podium",
                    Description = "Set up stage in a village.",
                    FlavorText = "Shout from above.",
                    Cost = 200,
                    Reach = 50,
                    SpaceRequirement = 1,
                    Prerequisites = new[] { "post-religion-era" },
                }
            }
        };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var timer = new Timer(intervalInMs);
        timer.Elapsed += TimerOnElapsed;
        timer.Start();
    }

    public void AdvanceToEra(EraAdvancement advancement)
    {
        if (advancement.Cost > currentFaith)
            return;

        currentFaith -= advancement.Cost;



        ownedAdvancements.Remove(CurrentEra);
        ownedAdvancements.Add(advancement);
        pastEras.Add(CurrentEra.Id);
    }

    public void BuyUpgrade(Upgrade upgrade)
    {
        if (upgrade.Cost > currentFaith)
            return;

        currentFaith -= upgrade.Cost;

        foreach (var upgradeEffect in upgrade.Effects)
        {
            switch (upgradeEffect)
            {
                case MoneyUpgradeEffect moneyUpgradeEffect:
                    moneyPerSecondModifier += moneyUpgradeEffect.MoneyPerSecondIncrease;
                    break;
            }
        }

        ownedAdvancements.Add(upgrade);
    }

    public void BuyBuilding(Building building)
    {
        if (building.SpaceRequirement > AvailableSpace)
            return;

        currentMoney -= building.Cost;
        ownedAdvancements.Add(building);
    }

    public void DemolishBuilding(Building building)
    {
        ownedAdvancements.Remove(building);
    }

    private void TimerOnElapsed(object _, ElapsedEventArgs __)
    {
        SetFaithOnNextTick();
        SetMoneyOnNextTick();
        //SetFollowersOnNextTick();
        this.StateHasChanged();
    }

    public void IncrementFaith()
    {
        currentFaith++;
    }

    public void IncrementFollowers()
    {
        if (currentFollowers < Reach && new Random().NextDouble() < 0.3)
        {
            currentFollowers++;
        }
    }

    private void SetFaithOnNextTick()
    {
        currentFaith += currentFollowers * ToTickValue(0.2);
    }

    private void SetMoneyOnNextTick()
    {
        currentMoney += currentFollowers * ToTickValue(moneyPerSecondModifier);
    }

    private double ToTickValue(double valuePerSecond)
    {
        return valuePerSecond / (1000d / intervalInMs);
    }

}
