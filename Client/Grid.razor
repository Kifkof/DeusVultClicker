@using DeusVultClicker.Client.Upgrades.Store.Selector
@using DeusVultClicker.Client.Buildings.Pages
@using DeusVultClicker.Client.Upgrades.Pages
@using DeusVultClicker.Client.Eras.Store.Selectors
@using DeusVultClicker.Client.Eras

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
<div id="grid-wrapper">
    <div id="title"><h1>Deus Vult Clicker</h1></div>
    <div id="era-container">
        <h2>@EraState.Value.Era.Title</h2>
        @if (EraAdvancement != null)
        {
            <AdvancementCard Title="@EraAdvancement.Title"
                             Cost="@($"{EraAdvancement.Cost} Faith")"
                             Description="@EraAdvancement.Description"
                             EffectDescription="@EraAdvancement.EffectDescription"
                             FlavorText="@EraAdvancement.FlavorText"
                             BuyText="Advance"
                             Disabled="@(EraAdvancement.Cost > AppState.Value.Faith)"
                             OnBuy="() => Dispatcher.Dispatch(new AdvanceToEraAction(EraAdvancement))" />
        }
    </div>
    <div id="ability-container">
        <button @onclick="() => Dispatcher.Dispatch(new AddFaithAction(UpgradeEffectsSelector.SelectFaithPerClickIncrease()))">
            Pray
        </button>
        <button disabled="@(AppState.Value.Followers >= BuildingState.Value.Reach)"
                @onclick="() => Dispatcher.Dispatch(new AddFollowersAction(1))">
            Proselytize
        </button>
    </div>
    <div id="stats-container">
        <Stats />
    </div>
    <div id="owned-buildings-container"><OwnedBuildings /></div>
    <div id="available-buildings-container"><AvailableBuildings /></div>
    <div id="faith-upgrades-container"><AvailableUpgrades /></div>
</div>
@code {
    [Inject]
    private AvailableEraSelector AvailableEraSelector { get; set; }
    private EraAdvancement EraAdvancement => AvailableEraSelector.SelectAvailableEra();
    [Inject]
    private IState<BuildingState> BuildingState { get; set; }
    [Inject]
    private IState<EraState> EraState { get; set; }
    [Inject]
    private IState<AppState> AppState { get; set; }
    [Inject]
    private UpgradeEffectsSelector UpgradeEffectsSelector { get; set; }
    [Inject]
    private IDispatcher Dispatcher { get; set; }
}
