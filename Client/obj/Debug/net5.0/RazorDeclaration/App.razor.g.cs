// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DeusVultClicker.Client
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\_Imports.razor"
using DeusVultClicker.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\App.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\App.razor"
using DeusVultClicker.Client.Advancements;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\App.razor"
using DeusVultClicker.Client.Advancements.Effects;

#line default
#line hidden
#nullable disable
    public partial class App : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 108 "C:\Users\Kifkof\source\repos\DeusVultClicker\Client\App.razor"
 
    private int Reach => OwnedBuildings.Sum(b => b.Reach);
    private double currentFaith;
    private int currentFollowers;
    private double currentMoney;
    private double moneyPerSecondModifier;
    private int intervalInMs = 50;
    private EraAdvancement CurrentEra => ownedAdvancements.OfType<EraAdvancement>().SingleOrDefault();
    private int existingSpace = 1;
    private int AvailableSpace => existingSpace - OwnedBuildings.Sum(b => b.SpaceRequirement);

    private List<Advancement> ownedAdvancements = new();

    private List<Upgrade> AvailableUpgrades => Upgrades
    .Where(u => !PurchasedUpgrades.Contains(u.Value) && u.Value.Prerequisites.All(p => ownedAdvancements.Any(a => a.Id == p)))
    .Select(u => u.Value)
    .ToList();

    private List<Upgrade> PurchasedUpgrades => ownedAdvancements.OfType<Upgrade>().ToList();

    private static readonly Dictionary<string, Upgrade> Upgrades = new()
    {
            {
                "beg",
                new Upgrade
                {
                    Id = "beg",
                    Title = "Beg",
                    Description = "Send your followers to beg for money.",
                    EffectDescription = "Follower cps + 0.1",
                    FlavorText = "Beg for merc.....money",
                    Cost = 250,
                    Prerequisites = new[] { "post-religion-era" },
                    Effects = new[] { new MoneyUpgradeEffect(0.1) }
                }
            }
        };

    private EraAdvancement AvailableEraAdvancement => EraAdvancements.Values
        .FirstOrDefault(u => !pastEras.Contains(u.Id) && u.Prerequisites.All(p => ownedAdvancements.Any(a => a.Id == p)));

    private List<string> pastEras = new();

    private static readonly Dictionary<string, EraAdvancement> EraAdvancements = new()
    {
            {
                "jesus-era",
                new EraAdvancement
                {
                    Id = "jesus-era",
                    Title = "Invent Jesus",
                    Description = "Please GOD send me a savior.",
                    EffectDescription = "Sends the Messiah to earth.",
                    FlavorText = "Jesus Christ it's Jesus Christ.",
                    Cost = 50,
                    EraName = "jesus-era"
                }
            },
            {
                "post-religion-era",
                new EraAdvancement
                {
                    Id = "post-religion-era",
                    Title = "You could make a religion out of this!",
                    Description = "Create a religion.",
                    EffectDescription = "Now what?",
                    FlavorText = "No don't.",
                    Cost = 500,
                    Prerequisites = new[] { "jesus-era", "boulder" },
                    EraName = "post-religion-era"
                }
            },
        };

    private List<Building> AvailableBuildings => Buildings
        .Where(u => u.Value.Prerequisites.All(p => ownedAdvancements.Any(a => a.Id == p)))
        .Select(u => u.Value)
        .ToList();

    private List<Building> OwnedBuildings => ownedAdvancements.OfType<Building>().ToList();

    private static readonly Dictionary<string, Building> Buildings = new()
    {
            {
                "boulder",
                new Building
                {
                    Id = "boulder",
                    Title = "Boulder",
                    Description = "A large stone to yell down from.",
                    FlavorText = "Everything has to start somewhere.",
                    Cost = 0,
                    Reach = 12,
                    SpaceRequirement = 1,
                    Prerequisites = new[] { "jesus-era" },
                }
            },
            {
                "podium",
                new Building
                {
                    Id = "podium",
                    Title = "Podium",
                    Description = "Set up stage in a village.",
                    FlavorText = "Shout from above.",
                    Cost = 200,
                    Reach = 50,
                    SpaceRequirement = 1,
                    Prerequisites = new[] { "post-religion-era" },
                }
            }
        };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var timer = new Timer(intervalInMs);
        timer.Elapsed += TimerOnElapsed;
        timer.Start();
    }

    public void AdvanceToEra(EraAdvancement advancement)
    {
        if (advancement.Cost > currentFaith)
            return;

        currentFaith -= advancement.Cost;



        ownedAdvancements.Remove(CurrentEra);
        ownedAdvancements.Add(advancement);
        pastEras.Add(CurrentEra.Id);
    }

    public void BuyUpgrade(Upgrade upgrade)
    {
        if (upgrade.Cost > currentFaith)
            return;

        currentFaith -= upgrade.Cost;

        foreach (var upgradeEffect in upgrade.Effects)
        {
            switch (upgradeEffect)
            {
                case MoneyUpgradeEffect moneyUpgradeEffect:
                    moneyPerSecondModifier += moneyUpgradeEffect.MoneyPerSecondIncrease;
                    break;
            }
        }

        ownedAdvancements.Add(upgrade);
    }

    public void BuyBuilding(Building building)
    {
        if (building.SpaceRequirement > AvailableSpace)
            return;

        currentMoney -= building.Cost;
        ownedAdvancements.Add(building);
    }

    public void DemolishBuilding(Building building)
    {
        ownedAdvancements.Remove(building);
    }

    private void TimerOnElapsed(object _, ElapsedEventArgs __)
    {
        SetFaithOnNextTick();
        SetMoneyOnNextTick();
        //SetFollowersOnNextTick();
        this.StateHasChanged();
    }

    public void IncrementFaith()
    {
        currentFaith++;
    }

    public void IncrementFollowers()
    {
        if (currentFollowers < Reach && new Random().NextDouble() < 0.3)
        {
            currentFollowers++;
        }
    }

    private void SetFaithOnNextTick()
    {
        currentFaith += currentFollowers * ToTickValue(0.2);
    }

    private void SetMoneyOnNextTick()
    {
        currentMoney += currentFollowers * ToTickValue(moneyPerSecondModifier);
    }

    private double ToTickValue(double valuePerSecond)
    {
        return valuePerSecond / (1000d / intervalInMs);
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
